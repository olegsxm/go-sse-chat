// Code generated by ent, DO NOT EDIT.

package message

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the message type in the database.
	Label = "message"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldRead holds the string denoting the read field in the database.
	FieldRead = "read"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeConversation holds the string denoting the conversation edge name in mutations.
	EdgeConversation = "conversation"
	// Table holds the table name of the message in the database.
	Table = "messages"
	// ConversationTable is the table that holds the conversation relation/edge. The primary key declared below.
	ConversationTable = "message_conversation"
	// ConversationInverseTable is the table name for the Conversation entity.
	// It exists in this package in order to avoid circular dependency with the "conversation" package.
	ConversationInverseTable = "conversations"
)

// Columns holds all SQL columns for message fields.
var Columns = []string{
	FieldID,
	FieldMessage,
	FieldRead,
	FieldCreatedAt,
}

var (
	// ConversationPrimaryKey and ConversationColumn2 are the table columns denoting the
	// primary key for the conversation relation (M2M).
	ConversationPrimaryKey = []string{"message_id", "conversation_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// MessageValidator is a validator for the "message" field. It is called by the builders before save.
	MessageValidator func(string) error
	// DefaultRead holds the default value on creation for the "read" field.
	DefaultRead bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Message queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByRead orders the results by the read field.
func ByRead(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRead, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByConversationCount orders the results by conversation count.
func ByConversationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConversationStep(), opts...)
	}
}

// ByConversation orders the results by conversation terms.
func ByConversation(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConversationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newConversationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConversationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ConversationTable, ConversationPrimaryKey...),
	)
}
