// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/olegsxm/go-sse-chat/ent/conversation"
	"github.com/olegsxm/go-sse-chat/ent/message"
	"github.com/olegsxm/go-sse-chat/ent/predicate"
	"github.com/olegsxm/go-sse-chat/ent/user"
)

// ConversationUpdate is the builder for updating Conversation entities.
type ConversationUpdate struct {
	config
	hooks    []Hook
	mutation *ConversationMutation
}

// Where appends a list predicates to the ConversationUpdate builder.
func (cu *ConversationUpdate) Where(ps ...predicate.Conversation) *ConversationUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *ConversationUpdate) SetName(s string) *ConversationUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ConversationUpdate) SetNillableName(s *string) *ConversationUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// ClearName clears the value of the "name" field.
func (cu *ConversationUpdate) ClearName() *ConversationUpdate {
	cu.mutation.ClearName()
	return cu
}

// SetAvatar sets the "avatar" field.
func (cu *ConversationUpdate) SetAvatar(s string) *ConversationUpdate {
	cu.mutation.SetAvatar(s)
	return cu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (cu *ConversationUpdate) SetNillableAvatar(s *string) *ConversationUpdate {
	if s != nil {
		cu.SetAvatar(*s)
	}
	return cu
}

// ClearAvatar clears the value of the "avatar" field.
func (cu *ConversationUpdate) ClearAvatar() *ConversationUpdate {
	cu.mutation.ClearAvatar()
	return cu
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (cu *ConversationUpdate) AddUserIDs(ids ...uuid.UUID) *ConversationUpdate {
	cu.mutation.AddUserIDs(ids...)
	return cu
}

// AddUser adds the "user" edges to the User entity.
func (cu *ConversationUpdate) AddUser(u ...*User) *ConversationUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddUserIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (cu *ConversationUpdate) AddMessageIDs(ids ...uuid.UUID) *ConversationUpdate {
	cu.mutation.AddMessageIDs(ids...)
	return cu
}

// AddMessages adds the "messages" edges to the Message entity.
func (cu *ConversationUpdate) AddMessages(m ...*Message) *ConversationUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.AddMessageIDs(ids...)
}

// Mutation returns the ConversationMutation object of the builder.
func (cu *ConversationUpdate) Mutation() *ConversationMutation {
	return cu.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (cu *ConversationUpdate) ClearUser() *ConversationUpdate {
	cu.mutation.ClearUser()
	return cu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (cu *ConversationUpdate) RemoveUserIDs(ids ...uuid.UUID) *ConversationUpdate {
	cu.mutation.RemoveUserIDs(ids...)
	return cu
}

// RemoveUser removes "user" edges to User entities.
func (cu *ConversationUpdate) RemoveUser(u ...*User) *ConversationUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveUserIDs(ids...)
}

// ClearMessages clears all "messages" edges to the Message entity.
func (cu *ConversationUpdate) ClearMessages() *ConversationUpdate {
	cu.mutation.ClearMessages()
	return cu
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (cu *ConversationUpdate) RemoveMessageIDs(ids ...uuid.UUID) *ConversationUpdate {
	cu.mutation.RemoveMessageIDs(ids...)
	return cu
}

// RemoveMessages removes "messages" edges to Message entities.
func (cu *ConversationUpdate) RemoveMessages(m ...*Message) *ConversationUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.RemoveMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConversationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConversationUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConversationUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConversationUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ConversationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(conversation.Table, conversation.Columns, sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(conversation.FieldName, field.TypeString, value)
	}
	if cu.mutation.NameCleared() {
		_spec.ClearField(conversation.FieldName, field.TypeString)
	}
	if value, ok := cu.mutation.Avatar(); ok {
		_spec.SetField(conversation.FieldAvatar, field.TypeString, value)
	}
	if cu.mutation.AvatarCleared() {
		_spec.ClearField(conversation.FieldAvatar, field.TypeString)
	}
	if cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   conversation.UserTable,
			Columns: conversation.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedUserIDs(); len(nodes) > 0 && !cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   conversation.UserTable,
			Columns: conversation.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   conversation.UserTable,
			Columns: conversation.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !cu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ConversationUpdateOne is the builder for updating a single Conversation entity.
type ConversationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConversationMutation
}

// SetName sets the "name" field.
func (cuo *ConversationUpdateOne) SetName(s string) *ConversationUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ConversationUpdateOne) SetNillableName(s *string) *ConversationUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// ClearName clears the value of the "name" field.
func (cuo *ConversationUpdateOne) ClearName() *ConversationUpdateOne {
	cuo.mutation.ClearName()
	return cuo
}

// SetAvatar sets the "avatar" field.
func (cuo *ConversationUpdateOne) SetAvatar(s string) *ConversationUpdateOne {
	cuo.mutation.SetAvatar(s)
	return cuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (cuo *ConversationUpdateOne) SetNillableAvatar(s *string) *ConversationUpdateOne {
	if s != nil {
		cuo.SetAvatar(*s)
	}
	return cuo
}

// ClearAvatar clears the value of the "avatar" field.
func (cuo *ConversationUpdateOne) ClearAvatar() *ConversationUpdateOne {
	cuo.mutation.ClearAvatar()
	return cuo
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (cuo *ConversationUpdateOne) AddUserIDs(ids ...uuid.UUID) *ConversationUpdateOne {
	cuo.mutation.AddUserIDs(ids...)
	return cuo
}

// AddUser adds the "user" edges to the User entity.
func (cuo *ConversationUpdateOne) AddUser(u ...*User) *ConversationUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddUserIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (cuo *ConversationUpdateOne) AddMessageIDs(ids ...uuid.UUID) *ConversationUpdateOne {
	cuo.mutation.AddMessageIDs(ids...)
	return cuo
}

// AddMessages adds the "messages" edges to the Message entity.
func (cuo *ConversationUpdateOne) AddMessages(m ...*Message) *ConversationUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.AddMessageIDs(ids...)
}

// Mutation returns the ConversationMutation object of the builder.
func (cuo *ConversationUpdateOne) Mutation() *ConversationMutation {
	return cuo.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (cuo *ConversationUpdateOne) ClearUser() *ConversationUpdateOne {
	cuo.mutation.ClearUser()
	return cuo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (cuo *ConversationUpdateOne) RemoveUserIDs(ids ...uuid.UUID) *ConversationUpdateOne {
	cuo.mutation.RemoveUserIDs(ids...)
	return cuo
}

// RemoveUser removes "user" edges to User entities.
func (cuo *ConversationUpdateOne) RemoveUser(u ...*User) *ConversationUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveUserIDs(ids...)
}

// ClearMessages clears all "messages" edges to the Message entity.
func (cuo *ConversationUpdateOne) ClearMessages() *ConversationUpdateOne {
	cuo.mutation.ClearMessages()
	return cuo
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (cuo *ConversationUpdateOne) RemoveMessageIDs(ids ...uuid.UUID) *ConversationUpdateOne {
	cuo.mutation.RemoveMessageIDs(ids...)
	return cuo
}

// RemoveMessages removes "messages" edges to Message entities.
func (cuo *ConversationUpdateOne) RemoveMessages(m ...*Message) *ConversationUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.RemoveMessageIDs(ids...)
}

// Where appends a list predicates to the ConversationUpdate builder.
func (cuo *ConversationUpdateOne) Where(ps ...predicate.Conversation) *ConversationUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ConversationUpdateOne) Select(field string, fields ...string) *ConversationUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Conversation entity.
func (cuo *ConversationUpdateOne) Save(ctx context.Context) (*Conversation, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConversationUpdateOne) SaveX(ctx context.Context) *Conversation {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConversationUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConversationUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ConversationUpdateOne) sqlSave(ctx context.Context) (_node *Conversation, err error) {
	_spec := sqlgraph.NewUpdateSpec(conversation.Table, conversation.Columns, sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Conversation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, conversation.FieldID)
		for _, f := range fields {
			if !conversation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != conversation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(conversation.FieldName, field.TypeString, value)
	}
	if cuo.mutation.NameCleared() {
		_spec.ClearField(conversation.FieldName, field.TypeString)
	}
	if value, ok := cuo.mutation.Avatar(); ok {
		_spec.SetField(conversation.FieldAvatar, field.TypeString, value)
	}
	if cuo.mutation.AvatarCleared() {
		_spec.ClearField(conversation.FieldAvatar, field.TypeString)
	}
	if cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   conversation.UserTable,
			Columns: conversation.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   conversation.UserTable,
			Columns: conversation.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   conversation.UserTable,
			Columns: conversation.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !cuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Conversation{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
