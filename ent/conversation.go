// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/olegsxm/go-sse-chat/ent/conversation"
)

// Conversation is the model entity for the Conversation schema.
type Conversation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar *string `json:"avatar,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConversationQuery when eager-loading is set.
	Edges        ConversationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ConversationEdges holds the relations/edges for other nodes in the graph.
type ConversationEdges struct {
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*Message `json:"messages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e ConversationEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e ConversationEdges) MessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[1] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Conversation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case conversation.FieldName, conversation.FieldAvatar:
			values[i] = new(sql.NullString)
		case conversation.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Conversation fields.
func (c *Conversation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case conversation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case conversation.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = new(string)
				*c.Name = value.String
			}
		case conversation.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				c.Avatar = new(string)
				*c.Avatar = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Conversation.
// This includes values selected through modifiers, order, etc.
func (c *Conversation) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Conversation entity.
func (c *Conversation) QueryUser() *UserQuery {
	return NewConversationClient(c.config).QueryUser(c)
}

// QueryMessages queries the "messages" edge of the Conversation entity.
func (c *Conversation) QueryMessages() *MessageQuery {
	return NewConversationClient(c.config).QueryMessages(c)
}

// Update returns a builder for updating this Conversation.
// Note that you need to call Conversation.Unwrap() before calling this method if this Conversation
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Conversation) Update() *ConversationUpdateOne {
	return NewConversationClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Conversation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Conversation) Unwrap() *Conversation {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Conversation is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Conversation) String() string {
	var builder strings.Builder
	builder.WriteString("Conversation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	if v := c.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.Avatar; v != nil {
		builder.WriteString("avatar=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Conversations is a parsable slice of Conversation.
type Conversations []*Conversation
