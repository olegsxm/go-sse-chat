// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonAaffeecbDecodeGithubComOlegsxmGoSseChatInternalModels(in *jlexer.Lexer, out *Messages) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Messages, 0, 0)
			} else {
				*out = Messages{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Message
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAaffeecbEncodeGithubComOlegsxmGoSseChatInternalModels(out *jwriter.Writer, in Messages) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Messages) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAaffeecbEncodeGithubComOlegsxmGoSseChatInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Messages) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAaffeecbEncodeGithubComOlegsxmGoSseChatInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Messages) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAaffeecbDecodeGithubComOlegsxmGoSseChatInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Messages) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAaffeecbDecodeGithubComOlegsxmGoSseChatInternalModels(l, v)
}
func easyjsonAaffeecbDecodeGithubComOlegsxmGoSseChatInternalModels1(in *jlexer.Lexer, out *MessageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "read":
			out.Read = bool(in.Bool())
		case "createdAt":
			out.CreatedAt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAaffeecbEncodeGithubComOlegsxmGoSseChatInternalModels1(out *jwriter.Writer, in MessageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"read\":"
		out.RawString(prefix)
		out.Bool(bool(in.Read))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAaffeecbEncodeGithubComOlegsxmGoSseChatInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAaffeecbEncodeGithubComOlegsxmGoSseChatInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAaffeecbDecodeGithubComOlegsxmGoSseChatInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAaffeecbDecodeGithubComOlegsxmGoSseChatInternalModels1(l, v)
}
func easyjsonAaffeecbDecodeGithubComOlegsxmGoSseChatInternalModels2(in *jlexer.Lexer, out *MessageRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		case "conversation":
			out.Conversation = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAaffeecbEncodeGithubComOlegsxmGoSseChatInternalModels2(out *jwriter.Writer, in MessageRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"conversation\":"
		out.RawString(prefix)
		out.String(string(in.Conversation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAaffeecbEncodeGithubComOlegsxmGoSseChatInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAaffeecbEncodeGithubComOlegsxmGoSseChatInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAaffeecbDecodeGithubComOlegsxmGoSseChatInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAaffeecbDecodeGithubComOlegsxmGoSseChatInternalModels2(l, v)
}
func easyjsonAaffeecbDecodeGithubComOlegsxmGoSseChatInternalModels3(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "createdAt":
			out.CreatedAt = string(in.String())
		case "read":
			out.Read = bool(in.Bool())
		case "sender":
			easyjsonAaffeecbDecodeGithubComOlegsxmGoSseChatInternalModels4(in, &out.Sender)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAaffeecbEncodeGithubComOlegsxmGoSseChatInternalModels3(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"read\":"
		out.RawString(prefix)
		out.Bool(bool(in.Read))
	}
	{
		const prefix string = ",\"sender\":"
		out.RawString(prefix)
		easyjsonAaffeecbEncodeGithubComOlegsxmGoSseChatInternalModels4(out, in.Sender)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAaffeecbEncodeGithubComOlegsxmGoSseChatInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAaffeecbEncodeGithubComOlegsxmGoSseChatInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAaffeecbDecodeGithubComOlegsxmGoSseChatInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAaffeecbDecodeGithubComOlegsxmGoSseChatInternalModels3(l, v)
}
func easyjsonAaffeecbDecodeGithubComOlegsxmGoSseChatInternalModels4(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "login":
			out.Login = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAaffeecbEncodeGithubComOlegsxmGoSseChatInternalModels4(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	out.RawByte('}')
}
